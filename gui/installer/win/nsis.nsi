# Auto-generated by EclipseNSIS Script Wizard
# 24 avr. 2009 16:54:32

Name ATK

!addplugindir "${PLUGIN_DIR}"
# General Symbol Definitions
!define REGKEY "SOFTWARE\$(^Name)"
!define COMPANY "France Telecom"
!define URL www.francetelecom.com

# MUI Symbol Definitions
!define MUI_ICON "${RESOURCES_DIR}\atk.ico"
!define MUI_FINISHPAGE_NOAUTOCLOSE
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall-colorful.ico"
!define MUI_UNFINISHPAGE_NOAUTOCLOSE

# Included files
!include "TextFunc.nsh"
!include Sections.nsh
!include MUI2.nsh
!include WinVer.nsh

# Variables
Var StartMenuGroup

# Installer pages
!insertmacro MUI_PAGE_WELCOME
!insertmacro MUI_PAGE_COMPONENTS
!insertmacro MUI_PAGE_LICENSE "${LICENSE_FILE}"
!insertmacro MUI_PAGE_DIRECTORY
!insertmacro MUI_PAGE_INSTFILES
!define      MUI_FINISHPAGE_RUN "$INSTDIR\ATK.exe"
!insertmacro MUI_PAGE_FINISH
!insertmacro MUI_UNPAGE_CONFIRM
!insertmacro MUI_UNPAGE_INSTFILES

# Installer languages
!insertmacro MUI_LANGUAGE English

# Installer attributes
OutFile "${RELEASE_DIR}\atk-${VERSION}.exe"
InstallDir $PROGRAMFILES\ATK
CRCCheck on
XPStyle on
ShowInstDetails show
VIProductVersion 0.0.0.0
VIAddVersionKey ProductName ATK
VIAddVersionKey ProductVersion "${VERSION}"
VIAddVersionKey CompanyName "${COMPANY}"
VIAddVersionKey CompanyWebsite "${URL}"
VIAddVersionKey FileVersion "${VERSION}"
VIAddVersionKey FileDescription ""
VIAddVersionKey LegalCopyright "Copyright France Telecom 2012, All Rights Reserved."
InstallDirRegKey HKLM "${REGKEY}" Path
ShowUninstDetails show

Var JavaVersion
Var AndroidEnvPath
Var downloadURLandroid
Var downloadJava

Var previousConfigFile
Var legacyBackupFile
Var userProfileFile

#parse a line a return the text before "="
#The line must contains "="
!macro GET_CONFIG_NAME Line Propertie
  Push $R1
  StrLen ${Propertie} ${Line}
#Propertie contains the last byte to copy
loop_:
  IntOp ${Propertie} ${Propertie} - 1
  StrCpy $R1 ${Line} 1 -${Propertie}
  StrCmp $R1 "" error_
  ${if} ${Propertie} < 0
  goto error_
  ${endif}
  StrCmp $R1 "=" 0 loop_
  #sub 1 to get "=" in the result
  #IntOp ${Propertie} ${Propertie} - 1
  StrCpy ${Propertie} ${Line} -${Propertie}
Goto done_
error_:
  StrCpy ${Propertie} error
done_:
  Pop $R1
!macroend

!define StrRep "!insertmacro StrRep"
!macro StrRep output string old new
    Push `${string}`
    Push `${old}`
    Push `${new}`
    !ifdef __UNINSTALL__
        Call un.StrRep
    !else
        Call StrRep
    !endif
    Pop ${output}
!macroend

!macro Func_StrRep un
    Function ${un}StrRep
        Exch $R2 ;new
        Exch 1
        Exch $R1 ;old
        Exch 2
        Exch $R0 ;string
        Push $R3
        Push $R4
        Push $R5
        Push $R6
        Push $R7
        Push $R8
        Push $R9

        StrCpy $R3 0
        StrLen $R4 $R1
        StrLen $R6 $R0
        StrLen $R9 $R2
        loop:
            StrCpy $R5 $R0 $R4 $R3
            StrCmp $R5 $R1 found
            StrCmp $R3 $R6 done
            IntOp $R3 $R3 + 1 ;move offset by 1 to check the next character
            Goto loop
        found:
            StrCpy $R5 $R0 $R3
            IntOp $R8 $R3 + $R4
            StrCpy $R7 $R0 "" $R8
            StrCpy $R0 $R5$R2$R7
            StrLen $R6 $R0
            IntOp $R3 $R3 + $R9 ;move offset by length of the replacement string
            Goto loop
        done:

        Pop $R9
        Pop $R8
        Pop $R7
        Pop $R6
        Pop $R5
        Pop $R4
        Pop $R3
        Push $R0
        Push $R1
        Pop $R0
        Pop $R1
        Pop $R0
        Pop $R2
        Exch $R1
    FunctionEnd
!macroend
!insertmacro Func_StrRep ""
!insertmacro Func_StrRep "un."

Function UpdateProperties
StrCpy $legacyBackupFile "$INSTDIR\backup\config.properties"
StrCpy $userProfileFile "$PROFILE\.atk\config.properties"

DetailPrint "Restore all parameter from config.properties"
push $R0
push $R1
push $R2
push $1
push $2
push $3

IfFileExists $legacyBackupFile setLegacyBackupFile setUserProfileFile

setLegacyBackupFile:
    DetailPrint "Found $legacyBackupFile"
    IfFileExists $userProfileFile setUserProfileFile
    StrCpy $previousConfigFile $legacyBackupFile
    goto restore

setUserProfileFile:
    DetailPrint "Found $userProfileFile"
    StrCpy $previousConfigFile $userProfileFile

restore:

IfFileExists $userProfileFile copy create
create:
FileOpen $0 "$userProfileFile" w
FileClose $0

copy:
#We need to copy config.properties to be able to read it and write at the same time
CopyFiles $previousConfigFile "$PROFILE\.atk\config.back"
FileOpen $1 $INSTDIR\config.properties r

ClearErrors
IfErrors endloop

loop:
    FileRead $1 $2
    IfErrors endloop #We have parsed all the file
    #First we read the name of the propertie
    !insertmacro GET_CONFIG_NAME $2 $3
    StrCmp $3 "error" loop
    #for ARO, we have a slightly different logic
    #we retrieve it from the registry when available
    StrCmp $3 "aroPath" aro
    ${ConfigRead} "$PROFILE\.atk\config.back" $3 $R0
    ${ConfigRead} "$INSTDIR\Config.properties" $3 $R1
    #if it doesn't exist in the old file, we add it and
    #set the value from the installer
    StrCmp $R0 "" add
    #if it already exists, we keep the previous user config
    #file value
    DetailPrint "writing $3 $R0 in $userProfileFile"
    ${ConfigWrite} $userProfileFile $3 $R0 $3
    goto loop
add:
    DetailPrint "adding $3 $R1 in $userProfileFile"
    ${ConfigWrite} $userProfileFile $3 $R1 $3
    goto loop
aro:
    ReadRegStr $R2 HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\AT&T ARO" "InstallLocation"
    DetailPrint "Found ARO in $R2"
    ${StrRep} '$0' $R2 '\' '\\'
    ${StrRep} '$R2' $0 ':' '\:'
    ${ConfigWrite} $userProfileFile "aroPath" "=$R2\\bin\\aro.exe" $3
    DetailPrint "$3"
    goto loop

endloop:
FileClose $1 ; and close the file
Delete "$PROFILE\.atk\config.back"
Delete "$INSTDIR\config.properties"

pop $3
pop $2
pop $1
pop $R2
pop $R1
pop $R0
FunctionEnd

# Installer sections

Section "ATK" SEC01
SectionIn RO
#we must start by uninstalling ATK


StrCpy $downloadURLandroid "http://dl.google.com/android/android-sdk_r18-windows.zip" 
StrCpy $downloadJava "http://java.com/fr/download/manual.jsp" 
StrCpy $JavaVersion "1.6" 

SetOverwrite on
SetOutPath $INSTDIR
;

 ${If} ${AtLeastWinXP}
 ${AndIf} ${AtMostWin7}
    DetailPrint "Running on compatible OS version"
 ${Else}
    DetailPrint "Your OS is currently not supported"
 ${Endif}
  

android:

call GetJavaVersion
  pop $0 ; major version
  pop $1 ; minor version
  pop $2 ; micro version
  pop $3 ; build/update version
  DetailPrint "Java major version: $0"
   DetailPrint "Java minor version: $1"
   DetailPrint "Java micro version: $2"
   DetailPrint "Java build/update version: $3"
  
  strcmp $0 "no" JavaNotInstalled
  strcmp $3 "" nobuild
  DetailPrint "$0.$1.$2_$3"
 goto fin
nobuild:
  DetailPrint "$0.$1.$2"
  Push "$0.$1.$2"
  Push $JavaVersion
  Call VersionCheck
  Pop $0
  strcmp $0 "1" fin
  
  ; output 1 - if number 1 is newer
  ;        2 - if number 2 is newer
  ;        0 - if it is the same verion
  ; output 2 in case above
JavaNotInstalled:
   DetailPrint "Please Update Java to java 1.7 Installation Failed"
   MessageBox MB_ICONSTOP "Please Update Java JRE to java 1.7"
   MessageBox MB_ICONSTOP  "Installation Failed"
   Abort
fin:


;ANDROID
;Check if allready installed
;Change env variable
   ; include for some of the windows messages defines
   !include "winmessages.nsh"
   ; HKLM (all users) vs HKCU (current user) defines
   !define env_hklm 'HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"'
   ; set variable
   ReadRegStr "$AndroidEnvPath" ${env_hklm} "Path"
   DetailPrint "android is installed at: $0"
   ;NSISpcre::REMatches $R0 "android-sdk-windows" "$0" 0
  ; NSISpcre::REMatches $0 ^A(.*)Z" "ABC...XYZ" 0
  ; DetailPrint "it matches: $0"

Push $AndroidEnvPath
Push "android-sdk-windows"
Call StrContains
Pop $0
DetailPrint "AndroidEnvPath: $0"

;set path 

Call removeEnvVar

  ; WriteRegExpandStr ${env_hklm} "PATH" MYVAL
   ; make sure windows knows about the change
   SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000

; copy all files except the files preceded by /x
    File /r /x .gitignore /x *.svn /x nsislog.txt /x jsmooth /x launch4j /x launch4j.log /x manifest* /x octk.* /x README.txt /x \tests_file /x \Output /x \rxtx /x *.nsi /x setup.* /x atk_*.exe /x *.iss /x setup_*.exe /x \export /x RXTXcomm.jar /x rxtxSerial.dll /x mediatek.jar /x \Salome-script *
    CreateDirectory "$SMPROGRAMS\$StartMenuGroup"
    SetOutPath $INSTDIR
    WriteRegStr HKLM SOFTWARE\ATK\Components ATKpath $INSTDIR
    WriteRegStr HKLM "${REGKEY}\Components" Main 1
    CreateShortcut $SMPROGRAMS\$StartMenuGroup\ATK.lnk $INSTDIR\ATK.exe "" $INSTDIR\atk.exe 0
    ;SetOutPath $INSTDIR\bat
    CreateShortcut $SMPROGRAMS\$StartMenuGroup\Analyser.lnk $INSTDIR\Analyser.exe "" $INSTDIR\analyser.exe 0
    CreateShortcut $SMPROGRAMS\$StartMenuGroup\ScriptRecorder.lnk $INSTDIR\ScriptRecorder.exe "" $INSTDIR\scriptrecorder.exe 0
    SetOutPath $INSTDIR\Screenshot
    CreateShortcut $SMPROGRAMS\$StartMenuGroup\ScreenShotComparator.lnk $INSTDIR\ScreenshotComparator.exe "" $INSTDIR\screencomp.exe 0
    ; Processing [HKEY_LOCAL_MACHINE\SOFTWARE\ATK\Components]

   DumpLog::DumpLog "$INSTDIR\nsislog.txt" .R3
  
endinstall:
;store installation result in log file

SectionEnd

Section "ARO" SEC02
  File "setup-ARO-4.0.exe"
  ExecWait "$INSTDIR\setup-ARO-4.0.exe /norun"
SectionEnd

Section -post SEC0001
    #Update the config.properties
    Call UpdateProperties
    RmDir /r $INSTDIR\backup
    WriteRegStr HKLM "${REGKEY}" Path $INSTDIR
    SetOutPath $INSTDIR
    WriteUninstaller $INSTDIR\uninstall.exe
    SetOutPath $SMPROGRAMS\$StartMenuGroup
    CreateShortcut "$SMPROGRAMS\$StartMenuGroup\Uninstall $(^Name).lnk" $INSTDIR\uninstall.exe
    WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" DisplayName "$(^Name)"
    WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" DisplayVersion "${VERSION}"
    WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" Publisher "${COMPANY}"
    WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" URLInfoAbout "${URL}"
    WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" DisplayIcon $INSTDIR\uninstall.exe
    WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" UninstallString $INSTDIR\uninstall.exe
    WriteRegDWORD HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" NoModify 1
    WriteRegDWORD HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" NoRepair 1
SectionEnd

# Macro for selecting uninstaller sections
!macro SELECT_UNSECTION SECTION_NAME UNSECTION_ID
    Push $R0
    ReadRegStr $R0 HKLM "${REGKEY}\Components" "${SECTION_NAME}"
    StrCmp $R0 1 0 next${UNSECTION_ID}
    !insertmacro SelectSection "${UNSECTION_ID}"
    GoTo done${UNSECTION_ID}
next${UNSECTION_ID}:
    !insertmacro UnselectSection "${UNSECTION_ID}"
done${UNSECTION_ID}:
    Pop $R0
!macroend

# Uninstaller sections
Section /o -un.Main UNSEC0000
    Delete /REBOOTOK $SMPROGRAMS\$StartMenuGroup\Analyser.bat.lnk
    Delete /REBOOTOK $SMPROGRAMS\$StartMenuGroup\ATK.bat.lnk
    Delete /REBOOTOK $SMPROGRAMS\$StartMenuGroup\Analyser.bat.lnk
    Delete /REBOOTOK $SMPROGRAMS\$StartMenuGroup\ScreenShotComparator.bat.lnk
    RmDir /r $INSTDIR
    DeleteRegValue HKLM "${REGKEY}\Components" Main
SectionEnd

Section -un.post UNSEC0001
    DeleteRegKey HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)"
    Delete /REBOOTOK "$SMPROGRAMS\$StartMenuGroup\Uninstall $(^Name).lnk"
    Delete $INSTDIR\uninstall.exe
    DeleteRegValue HKLM "${REGKEY}" Path
    DeleteRegKey /IfEmpty HKLM "${REGKEY}\Components"
    DeleteRegKey /IfEmpty HKLM "${REGKEY}"
    RmDir /REBOOTOK $SMPROGRAMS\$StartMenuGroup
SectionEnd





 ;StrContains
; This function does a case sensitive searches for an occurrence of a substring in a string. 
; It returns the substring if it is found. 
; Otherwise it returns null(""). 
; Written by kenglish_hi
; Adapted from StrReplace written by dandaman32
 
 
Var STR_HAYSTACK
Var STR_NEEDLE
Var STR_CONTAINS_VAR_1
Var STR_CONTAINS_VAR_2
Var STR_CONTAINS_VAR_3
Var STR_CONTAINS_VAR_4
Var STR_RETURN_VAR
 
Function StrContains
  Exch $STR_NEEDLE
  Exch 1
  Exch $STR_HAYSTACK
  ; Uncomment to debug
  ;MessageBox MB_OK 'STR_NEEDLE = $STR_NEEDLE STR_HAYSTACK = $STR_HAYSTACK '
    StrCpy $STR_RETURN_VAR ""
    StrCpy $STR_CONTAINS_VAR_1 -1
    StrLen $STR_CONTAINS_VAR_2 $STR_NEEDLE
    StrLen $STR_CONTAINS_VAR_4 $STR_HAYSTACK
    loop:
      IntOp $STR_CONTAINS_VAR_1 $STR_CONTAINS_VAR_1 + 1
      StrCpy $STR_CONTAINS_VAR_3 $STR_HAYSTACK $STR_CONTAINS_VAR_2 $STR_CONTAINS_VAR_1
      StrCmp $STR_CONTAINS_VAR_3 $STR_NEEDLE found
      StrCmp $STR_CONTAINS_VAR_1 $STR_CONTAINS_VAR_4 done
      Goto loop
    found:
      StrCpy $STR_RETURN_VAR $STR_NEEDLE
      Goto done
    done:
   Pop $STR_NEEDLE ;Prevent "invalid opcode" errors and keep the
   Exch $STR_RETURN_VAR  
FunctionEnd
 
!macro _StrContainsConstructor OUT NEEDLE HAYSTACK
  Push "${HAYSTACK}"
  Push "${NEEDLE}"
  Call StrContains
  Pop "${OUT}"
!macroend
 
!define StrContains '!insertmacro "_StrContainsConstructor"'

Function .onInit
  InitPluginsDir
    
  #we must start by checking if ATK is already installed   
  ReadRegStr $R0 HKLM \
  "Software\Microsoft\Windows\CurrentVersion\Uninstall\$(^Name)" \
  "UninstallString"
  StrCmp $R0 "" done
 
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "$(^Name) is already installed. $\n$\nClick `OK` to remove the \
  previous version or `Cancel` to cancel this upgrade." \
  IDOK uninst
  Abort
 
;Run the uninstaller
uninst:
  ClearErrors
  ExecWait '$R0 _?=$INSTDIR' ;Do not copy the uninstaller to a temp file
 
  IfErrors no_remove_uninstaller done
no_remove_uninstaller:
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Didn't manage to uninstall $(^Name). $\n$\nClick `OK` to continue the \
  installation or `Cancel` to abort." \
  IDOK done
  Abort

done:
     StrCpy $StartMenuGroup ATK
FunctionEnd

# Uninstaller functions
Function un.onInit
    ReadRegStr $INSTDIR HKLM "${REGKEY}" Path
    StrCpy $StartMenuGroup ATK
    !insertmacro SELECT_UNSECTION Main ${UNSEC0000}
FunctionEnd


Function Split
  Exch $R0
  Exch
  Exch $R1
  Push $R2
  Push $R3
  StrCpy $R3 $R1
  StrLen $R1 $R0
  IntOp $R1 $R1 + 1
  loop:
    IntOp $R1 $R1 - 1
    StrCpy $R2 $R0 1 -$R1
    StrCmp $R1 0 exit0
    StrCmp $R2 $R3 exit1 loop
  exit0:
  StrCpy $R1 ""
  Goto exit2
  exit1:
    IntOp $R1 $R1 - 1
    StrCmp $R1 0 0 +3
     StrCpy $R2 ""
     Goto +2
    StrCpy $R2 $R0 "" -$R1
    IntOp $R1 $R1 + 1
    StrCpy $R0 $R0 -$R1
    StrCpy $R1 $R2
  exit2:
  Pop $R3
  Pop $R2
  Exch $R1 ;rest
  Exch
  Exch $R0 ;first
FunctionEnd


Function removeEnvVar
StrCpy $R9 ""
DetailPrint "$AndroidEnvPath" 

loop:
Push ";" ;divider char
Push $AndroidEnvPath ;input string
 Call Split
Pop $R0 ;1st part ["string1"]
Pop $R1 ;rest ["string2|string3|string4|string5"]

;check if contains android-sdk-windows
Push $R0 ;first part
Push "android-sdk-windows"
Call StrContains
Pop $0
StrCmp $0 "android-sdk-windows" noandroidpath 0 ;find android goto noandroidpath 
StrCpy $R9 "$R9$R0;"
;MessageBox MB_OK "Detect $R0"
noandroidpath:
;check if contains ;
StrCpy $AndroidEnvPath $R1

Push $R1
Push ";"
Call StrContains
Pop $0
StrCmp $0 ";"  loop 0
StrCpy $R9 "$R9$R1;"
StrCpy $AndroidEnvPath $R9
;MessageBox MB_OK "END$AndroidEnvPath"
DetailPrint "$R9" 
WriteRegExpandStr  ${env_hklm} "Path" "$R9;C:\android\android-sdk-windows\platform-tools;"


FunctionEnd


Function GetJavaVersion
  push $R0
  push $R1
  push $2
  push $0
  push $3
  push $4
 
  ReadRegStr $2 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment" "CurrentVersion"
  StrCmp $2 "" DetectTry2
  ReadRegStr $3 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment\$2" "MicroVersion"
  StrCmp $3 "" DetectTry2
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment\$2" "UpdateVersion"
  StrCmp $4 "" 0 GotFromUpdate
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Runtime Environment\$2" "JavaHome"
  Goto GotJRE
DetectTry2:
  ReadRegStr $2 HKLM "SOFTWARE\JavaSoft\Java Development Kit" "CurrentVersion"
  StrCmp $2 "" NoFound
  ReadRegStr $3 HKLM "SOFTWARE\JavaSoft\Java Development Kit\$2" "MicroVersion"
  StrCmp $3 "" NoFound
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Development Kit\$2" "UpdateVersion"
  StrCmp $4 "" 0 GotFromUpdate
  ReadRegStr $4 HKLM "SOFTWARE\JavaSoft\Java Development Kit\$2" "JavaHome"
GotJRE:
  ; calc build version
  strlen $0 $3
  intcmp $0 1 0 0 GetFromMicro
  ; get it from the path
GetFromPath:
  strlen $R0 $4
  intop $R0 $R0 - 1
  StrCpy $0 ""
loopP:
  StrCpy $R1 $4 1 $R0
  StrCmp $R1 "" DotFoundP
  StrCmp $R1 "_" UScoreFound
  StrCmp $R1 "." DotFoundP
  StrCpy $0 "$R1$0"
  Goto GoLoopingP
DotFoundP:
  push ""
  Exch 6
  goto CalcMicro
UScoreFound:
  push $0
  Exch 6
  goto CalcMicro
GoLoopingP:
  intcmp $R0 0 DotFoundP DotFoundP
  IntOp $R0 $R0 - 1
  Goto loopP
GetFromMicro:
  strcpy $4 $3
  goto GetFromPath
GotFromUpdate:
  push $4
  Exch 6
 
CalcMicro:
  Push $3 ; micro
  Exch 6
  ; break version into major and minor
  StrCpy $R0 0
  StrCpy $0 ""
loop:
  StrCpy $R1 $2 1 $R0
  StrCmp $R1 "" done
  StrCmp $R1 "." DotFound
  StrCpy $0 "$0$R1"
  Goto GoLooping
DotFound:
  Push $0 ; major
  Exch 5
  StrCpy $0 ""
GoLooping:
  IntOp $R0 $R0 + 1
  Goto loop
 
done:
  Push $0 ; minor
  Exch 7
  ; restore register values
  pop $0
  pop $2
  pop $R1
  pop $R0
  pop $3
  pop $4
  return
NoFound:
  pop $4
  pop $3
  pop $0
  pop $2
  pop $R1
  pop $R0
  push ""
  push "installed"
  push "java"
  push "no"
FunctionEnd
 
Function VersionCheck
  Exch $0 ;second versionnumber
  Exch
  Exch $1 ;first versionnumber
  Push $R0 ;counter for $0
  Push $R1 ;counter for $1
  Push $3 ;temp char
  Push $4 ;temp string for $0
  Push $5 ;temp string for $1
  StrCpy $R0 "-1"
  StrCpy $R1 "-1"
  Start:
  StrCpy $4 ""
  DotLoop0:
  IntOp $R0 $R0 + 1
  StrCpy $3 $0 1 $R0
  StrCmp $3 "" DotFound0
  StrCmp $3 "." DotFound0
  StrCpy $4 $4$3
  Goto DotLoop0
  DotFound0:
  StrCpy $5 ""
  DotLoop1:
  IntOp $R1 $R1 + 1
  StrCpy $3 $1 1 $R1
  StrCmp $3 "" DotFound1
  StrCmp $3 "." DotFound1
  StrCpy $5 $5$3
  Goto DotLoop1
  DotFound1:
  Strcmp $4 "" 0 Not4
    StrCmp $5 "" Equal
    Goto Ver2Less
  Not4:
  StrCmp $5 "" Ver2More
  IntCmp $4 $5 Start Ver2Less Ver2More
  Equal:
  StrCpy $0 "0"
  Goto Finish
  Ver2Less:
  StrCpy $0 "1"
  Goto Finish
  Ver2More:
  StrCpy $0 "2"
  Finish:
  Pop $5
  Pop $4
  Pop $3
  Pop $R1
  Pop $R0
  Pop $1
  Exch $0
FunctionEnd